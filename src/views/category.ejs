<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Selection</title>
    <style>
        label {
            display: flex;
            align-items: center;
        }
        .page-number {
            cursor: pointer;
            user-select: none; /* Prevent text selection */
        }
        .current-page {
            font-weight: bold;
        }
        #selectionMessage {
            margin-bottom: 10px;
            font-style: italic;
        }
        .popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .popup.show {
            display: block;
        }
    </style>
</head>
<body>
    <h1>Select Categories</h1>
    <form id="categoryForm">        
        <fieldset id="categoryFieldset">
            <legend>Select Categories:</legend>
        </fieldset>
        <br>
        <div id="pageNumbers"></div>
        <br>
        <button type="button" onclick="submitCategories()">Submit</button>
    </form>
    <br>
    <div id="popupNotification" class="popup">
        Categories saved successfully!
    </div>


    <script>
        let selectedCategories = [];

        const fetchCategories = async (pageNumber) => {
            try {
                if (!pageNumber) pageNumber = 1;
                const token = localStorage.getItem('token');
                const response = await fetch(`/categories?page=${pageNumber}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                const categories = await response.json();
                return categories;
            } catch (error) {
                console.error('Error fetching categories:', error);
                alert('Failed to fetch categories');
                return [];
            }
        };

        const renderCategories = async (pageNumber = 1) => {
            const categories = await fetchCategories(pageNumber);
            const categoryFieldset = document.getElementById('categoryFieldset');
            categoryFieldset.innerHTML = '';

            categories.forEach(category => {
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = 'categories';
                checkbox.value = category.id;
                
                if (selectedCategories.includes(category.id)) {
                    checkbox.checked = true;
                }
                
                checkbox.addEventListener('change', () => {
                    if (checkbox.checked) {
                        selectedCategories.push(category.id);
                    } else {
                        selectedCategories = selectedCategories.filter(id => id !== category.id);
                    }
                });
                const label = document.createElement('label');
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(category.name));
                categoryFieldset.appendChild(label);
                categoryFieldset.appendChild(document.createElement('br'));
            });

            renderPageNumbers(pageNumber);
        };

        const renderPageNumbers = async (currentPage) => {
            const pageNumbersContainer = document.getElementById('pageNumbers');
            pageNumbersContainer.innerHTML = '';

            for (let i = 1; i <= 17; i++) {
                const pageNumber = document.createElement('span');
                pageNumber.textContent = i;
                pageNumber.classList.add('page-number');
                if (i === currentPage) {
                    pageNumber.classList.add('current-page');
                } else {
                    pageNumber.addEventListener('click', async () => {
                        await renderCategories(i);
                    });
                }
                pageNumbersContainer.appendChild(pageNumber);
                pageNumbersContainer.appendChild(document.createTextNode(' ')); // Add space between page numbers
            }
        };

        const showPopupNotification = () => {
            const popupNotification = document.getElementById('popupNotification');
            popupNotification.classList.add('show');
            setTimeout(() => {
                popupNotification.classList.remove('show');
                location.reload();
            }, 2000);
        };

        const submitCategories = async () => {
            try {
                const formData = {
                    categories: selectedCategories
                };
                console.log('Submitting categories:', formData);

                const token = localStorage.getItem('token');
                const response = await fetch('/categories', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.status === 200) {
                    console.log('Categories submitted');
                    showPopupNotification();
                } else {
                    const responseData = await response.json();
                    throw new Error(responseData.message);
                }
                selectedCategories = [];
            } catch (error) {
                console.error('Error submitting categories:', error);
                alert('Failed to submit categories');
            }
        };

        window.onload = async () => {
            const userCategoriesResponse = await fetch('/categories/user/selected', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            const userCategoriesData = await userCategoriesResponse.json();
            selectedCategories = userCategoriesData?.message?.categories || [];

            renderCategories();
        };
    </script>
</body>
</html>
